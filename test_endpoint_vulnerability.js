// Test de vuln√©rabilit√© de l'endpoint /api/test-security
const API_BASE_URL = 'http://localhost:8080'

async function testEndpointVulnerability() {
  console.log('üö® Test de vuln√©rabilit√© - Endpoint /api/test-security')
  console.log('====================================================')
  
  try {
    // Test 1: G√©n√©rer un token pour un utilisateur existant
    console.log('\n1Ô∏è‚É£ G√©n√©ration de token pour utilisateur existant...')
    const response1 = await fetch(`${API_BASE_URL}/api/test-security`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: 'jack@example.com' })
    })
    
    if (response1.ok) {
      const data1 = await response1.json()
      console.log('‚ùå VULN√âRABILIT√â TROUV√âE !')
      console.log(`   Token g√©n√©r√©: ${data1.token}`)
      console.log(`   Lien de reset: ${data1.resetUrl}`)
      console.log(`   Utilisateur: ${data1.user}`)
    }
    
    // Test 2: G√©n√©rer un token pour un utilisateur inexistant
    console.log('\n2Ô∏è‚É£ G√©n√©ration de token pour utilisateur inexistant...')
    const response2 = await fetch(`${API_BASE_URL}/api/test-security`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: 'hacker@evil.com' })
    })
    
    if (response2.ok) {
      const data2 = await response2.json()
      console.log('‚ùå VULN√âRABILIT√â CONFIRM√âE !')
      console.log(`   Token g√©n√©r√© pour email inexistant: ${data2.token}`)
      console.log(`   Lien de reset: ${data2.resetUrl}`)
    }
    
    // Test 3: Tentative d'utilisation du token g√©n√©r√©
    console.log('\n3Ô∏è‚É£ Tentative d\'utilisation du token...')
    if (response1.ok) {
      const data1 = await response1.json()
      const resetResponse = await fetch(`${API_BASE_URL}/api/reset-password`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          token: data1.token,
          newPassword: 'hacked123'
        })
      })
      
      if (resetResponse.ok) {
        console.log('üö® CRITIQUE: Token de test fonctionne pour reset de mot de passe !')
      } else {
        console.log('‚úÖ Token de test rejet√© (bon)')
      }
    }
    
    console.log('\nüí° CONCLUSION:')
    console.log('- Cet endpoint permet de g√©n√©rer des tokens de reset')
    console.log('- Il peut √™tre utilis√© pour bypasser la s√©curit√©')
    console.log('- Il doit √™tre supprim√© en production')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message)
  }
}

// Ex√©cuter le test
testEndpointVulnerability()
