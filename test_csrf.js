#!/usr/bin/env node

// Script de test pour la protection CSRF
const API_BASE_URL = 'http://localhost:8080'

async function testCSRFProtection() {
  console.log('üîí Test de Protection CSRF')
  console.log('========================')
  
  try {
    // Test 1: R√©cup√©rer un token CSRF
    console.log('\n1Ô∏è‚É£ R√©cup√©ration d\'un token CSRF...')
    const tokenResponse = await fetch(`${API_BASE_URL}/api/csrf-token`, {
      method: 'GET',
      headers: {
        'X-Session-ID': 'test_session_123',
        'Content-Type': 'application/json'
      }
    })
    
    if (!tokenResponse.ok) {
      throw new Error(`Erreur lors de la r√©cup√©ration du token: ${tokenResponse.status}`)
    }
    
    const tokenData = await tokenResponse.json()
    console.log('‚úÖ Token CSRF r√©cup√©r√©:', tokenData.csrfToken.substring(0, 8) + '...')
    
    // Test 2: Requ√™te sans token CSRF (devrait √©chouer)
    console.log('\n2Ô∏è‚É£ Test requ√™te sans token CSRF...')
    const responseWithoutToken = await fetch(`${API_BASE_URL}/api/slots`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Session-ID': 'test_session_123'
      },
      body: JSON.stringify({ test: true })
    })
    
    if (responseWithoutToken.status === 403) {
      console.log('‚úÖ Protection CSRF active: Requ√™te sans token bloqu√©e')
    } else {
      console.log('‚ùå Protection CSRF d√©faillante: Requ√™te sans token autoris√©e')
    }
    
    // Test 3: Requ√™te avec token CSRF (devrait r√©ussir)
    console.log('\n3Ô∏è‚É£ Test requ√™te avec token CSRF...')
    const responseWithToken = await fetch(`${API_BASE_URL}/api/slots`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Session-ID': 'test_session_123',
        'X-CSRF-Token': tokenData.csrfToken
      },
      body: JSON.stringify({ test: true })
    })
    
    if (responseWithToken.status !== 403) {
      console.log('‚úÖ Protection CSRF fonctionnelle: Requ√™te avec token autoris√©e')
    } else {
      console.log('‚ùå Protection CSRF d√©faillante: Requ√™te avec token bloqu√©e')
    }
    
    // Test 4: Requ√™te avec token expir√© (devrait √©chouer)
    console.log('\n4Ô∏è‚É£ Test requ√™te avec token invalide...')
    const responseWithInvalidToken = await fetch(`${API_BASE_URL}/api/slots`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Session-ID': 'test_session_123',
        'X-CSRF-Token': 'invalid_token_12345'
      },
      body: JSON.stringify({ test: true })
    })
    
    if (responseWithInvalidToken.status === 403) {
      console.log('‚úÖ Protection CSRF active: Token invalide rejet√©')
    } else {
      console.log('‚ùå Protection CSRF d√©faillante: Token invalide accept√©')
    }
    
    // Test 5: Requ√™te avec mauvaise session (devrait √©chouer)
    console.log('\n5Ô∏è‚É£ Test requ√™te avec mauvaise session...')
    const responseWithWrongSession = await fetch(`${API_BASE_URL}/api/slots`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Session-ID': 'wrong_session_456',
        'X-CSRF-Token': tokenData.csrfToken
      },
      body: JSON.stringify({ test: true })
    })
    
    if (responseWithWrongSession.status === 403) {
      console.log('‚úÖ Protection CSRF active: Mauvaise session rejet√©e')
    } else {
      console.log('‚ùå Protection CSRF d√©faillante: Mauvaise session accept√©e')
    }
    
    console.log('\nüéâ Tests de protection CSRF termin√©s!')
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message)
  }
}

// Ex√©cuter les tests
testCSRFProtection()
