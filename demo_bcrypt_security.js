// D√©monstration de la s√©curit√© avec bcrypt
const bcrypt = require('bcrypt')

async function demonstrateBcryptSecurity() {
  console.log('üõ°Ô∏è S√©curit√© avec bcrypt + salt :')
  
  const password = 'password123'
  
  // G√©n√©rer plusieurs hash pour le m√™me mot de passe
  const hash1 = await bcrypt.hash(password, 12)
  const hash2 = await bcrypt.hash(password, 12)
  const hash3 = await bcrypt.hash(password, 12)
  
  console.log(`Mot de passe: "${password}"`)
  console.log(`Hash 1: ${hash1}`)
  console.log(`Hash 2: ${hash2}`)
  console.log(`Hash 3: ${hash3}`)
  console.log('')
  
  // V√©rifier que tous les hash sont diff√©rents
  console.log('‚úÖ Tous les hash sont diff√©rents !')
  console.log(`Hash 1 === Hash 2: ${hash1 === hash2}`)
  console.log(`Hash 2 === Hash 3: ${hash2 === hash3}`)
  console.log(`Hash 1 === Hash 3: ${hash1 === hash3}`)
  console.log('')
  
  // Mais tous permettent de v√©rifier le m√™me mot de passe
  console.log('üîç V√©rification des mots de passe :')
  console.log(`Hash 1 v√©rifie "password123": ${await bcrypt.compare(password, hash1)}`)
  console.log(`Hash 2 v√©rifie "password123": ${await bcrypt.compare(password, hash2)}`)
  console.log(`Hash 3 v√©rifie "password123": ${await bcrypt.compare(password, hash3)}`)
  console.log(`Hash 1 v√©rifie "wrongpass": ${await bcrypt.compare('wrongpass', hash1)}`)
  
  console.log('')
  console.log('üí° Avantages de bcrypt :')
  console.log('- Chaque hash est unique (salt automatique)')
  console.log('- Impossible de faire des rainbow tables')
  console.log('- R√©sistant aux attaques par dictionnaire')
  console.log('- Temps de calcul configurable (co√ªt)')
}

// Si bcrypt n'est pas install√©, montrer la diff√©rence conceptuelle
console.log('üîç Comparaison SHA256 vs bcrypt :')
console.log('')
console.log('‚ùå SHA256 sans salt (votre code actuel) :')
console.log('   "password123" ‚Üí toujours "ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f"')
console.log('   "password123" ‚Üí toujours "ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f"')
console.log('   "password123" ‚Üí toujours "ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f"')
console.log('')
console.log('‚úÖ bcrypt avec salt :')
console.log('   "password123" ‚Üí "$2b$12$abc123...xyz789" (unique)')
console.log('   "password123" ‚Üí "$2b$12$def456...uvw012" (unique)')
console.log('   "password123" ‚Üí "$2b$12$ghi789...rst345" (unique)')
console.log('')
console.log('üö® Cons√©quence :')
console.log('- Avec SHA256 : Si un hash est cass√©, tous les utilisateurs avec le m√™me mot de passe sont compromis')
console.log('- Avec bcrypt : M√™me si un hash est cass√©, les autres restent s√©curis√©s')
